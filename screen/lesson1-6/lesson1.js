import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Dimensions, Modal } from 'react-native';
import { Audio } from 'expo-av';
import { useNavigation } from '@react-navigation/native';
import { LinearGradient } from 'expo-linear-gradient';

const { width } = Dimensions.get('window');

// Custom Alert Component
const CustomAlert = ({ visible, onClose, type, title, message, buttonText }) => {
  const isCorrect = type === 'correct';
  return (
    <Modal animationType="fade" transparent={true} visible={visible} onRequestClose={onClose}>
      <View style={styles.modalOverlay}>
        <View style={styles.modalContainer}>
          <LinearGradient
            colors={isCorrect ? ['#4CAF50', '#45A049'] : ['#f44336', '#d32f2f']}
            style={styles.modalHeader}
          >
            <Text style={styles.modalIcon}>{isCorrect ? 'üéâ' : '‚ùå'}</Text>
            <Text style={styles.modalTitle}>{title}</Text>
          </LinearGradient>
          <View style={styles.modalBody}>
            <Text style={styles.modalMessage}>{message}</Text>
          </View>
          <View style={styles.modalFooter}>
            <TouchableOpacity
              style={[styles.modalButton, { backgroundColor: isCorrect ? '#4CAF50' : '#f44336' }]}
              onPress={onClose}
            >
              <Text style={styles.modalButtonText}>{buttonText}</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );
};

export default function Lesson1() {
  const navigation = useNavigation();
  const [sound, setSound] = useState();
  const [currentScore, setCurrentScore] = useState(0);
  const [totalQuestions] = useState(8);
  const [answeredQuestions, setAnsweredQuestions] = useState(new Set());
  const [selectedChoices, setSelectedChoices] = useState({}); // key: questionId, value: choiceIndex
  const [isPlaying, setIsPlaying] = useState(false);

  // Custom Alert States
  const [alertVisible, setAlertVisible] = useState(false);
  const [alertData, setAlertData] = useState({
    type: 'correct',
    title: '',
    message: '',
    buttonText: '‡∏ï‡∏Å‡∏•‡∏á'
  });

  useEffect(() => {
    Audio.setAudioModeAsync({
      allowsRecordingIOS: false,
      staysActiveInBackground: true,
      interruptionModeIOS: Audio.INTERRUPTION_MODE_IOS_DO_NOT_MIX,
      playsInSilentModeIOS: true,
      shouldDuckAndroid: true,
      interruptionModeAndroid: Audio.INTERRUPTION_MODE_ANDROID_DO_NOT_MIX,
      playThroughEarpieceAndroid: false,
    });
  }, []);

  useEffect(() => {
    return sound
      ? () => {
        sound.unloadAsync();
      }
      : undefined;
  }, [sound]);

  // Custom Alert Function
  const showCustomAlert = (type, title, message, buttonText = '‡∏ï‡∏Å‡∏•‡∏á') => {
    setAlertData({ type, title, message, buttonText });
    setAlertVisible(true);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
  const playSound = async (text, rate = 0.8) => {
    if (isPlaying) {
      showCustomAlert('error', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏ö‡∏Å‡πà‡∏≠‡∏ô', '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß');
      return;
    }
    try {
      setIsPlaying(true);
      if (sound) {
        await sound.unloadAsync();
        setSound(null);
      }
      const cleanText = text.replace(/[^\w\s.,!?]/g, '');
      const encodedText = encodeURIComponent(cleanText);
      const ttsUrls = [
        `https://translate.google.com/translate_tts?ie=UTF-8&q=${encodedText}&tl=en&client=tw-ob&ttsspeed=${rate}`,
        `https://api.voicerss.org/?key=demo&hl=en-us&src=${encodedText}&r=${rate}&c=mp3&f=44khz_16bit_stereo`
      ];

      let soundCreated = false;
      for (let i = 0; i < ttsUrls.length; i++) {
        try {
          const { sound: newSound } = await Audio.Sound.createAsync(
            { uri: ttsUrls[i] },
            { shouldPlay: true, volume: 1.0 }
          );
          setSound(newSound);
          newSound.setOnPlaybackStatusUpdate((status) => {
            if (status.didJustFinish) {
              setIsPlaying(false);
            }
          });
          soundCreated = true;
          break;
        } catch {
          continue;
        }
      }
      if (!soundCreated) throw new Error('All TTS services failed');
    } catch (error) {
      setIsPlaying(false);
      showCustomAlert(
        'error',
        '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ',
        `‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô: "${text}"\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï`,
        '‡∏ï‡∏Å‡∏•‡∏á'
      );
    }
  };

  const playSimpleSound = async (text) => {
    try {
      if (typeof window !== 'undefined' && window.speechSynthesis) {
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = 'en-US';
        utterance.rate = 0.8;
        utterance.pitch = 1;
        utterance.volume = 1;
        window.speechSynthesis.speak(utterance);
        return;
      }
      await playSound(text);
    } catch {
      await playSound(text);
    }
  };

  const stopSound = async () => {
    try {
      if (sound) {
        await sound.stopAsync();
        await sound.unloadAsync();
        setSound(null);
      }
      setIsPlaying(false);
    } catch { }
  };

  const handleQuizSubmit = (questionId, answer, correctAnswer, choiceIndex) => {
    if (answeredQuestions.has(questionId)) {
      showCustomAlert('error', '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', '‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß', '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß');
      return;
    }
    const newAnsweredQuestions = new Set(answeredQuestions);
    newAnsweredQuestions.add(questionId);
    setAnsweredQuestions(newAnsweredQuestions);

    setSelectedChoices((prev) => ({ ...prev, [questionId]: choiceIndex }));

    if (answer === correctAnswer) {
      setCurrentScore(currentScore + 1);
      showCustomAlert(
        'correct',
        '‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! üéâ',
        'üåü ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!\n\n‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° ‡∏Å‡πâ‡∏≤‡∏ß‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÄ‡∏•‡∏¢!',
        '‡∏ï‡πà‡∏≠‡πÑ‡∏õ'
      );
      setTimeout(() => playSimpleSound('Excellent! Well done!'), 500);
    } else {
      showCustomAlert(
        'error',
        '‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà! üí™',
        `ü§î ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏≠: ${correctAnswer}\n\n‡∏≠‡∏¢‡πà‡∏≤‡∏ó‡πâ‡∏≠‡πÅ‡∏ó‡πâ! ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô!`,
        '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß'
      );
      setTimeout(() => playSimpleSound('Try again! You can do it!'), 500);
    }
  };

  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á, vocab, verbCategories, readingText, quizQuestions ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
  // (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ã‡πâ‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà)
  // .....
  // *** ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏™‡πà DATA ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ***
  const examples = [
    { thai: "‡∏â‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏õ‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß", english: "I have been to Japan.", type: "Present Perfect - Experience", usage: "‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ" },
    { thai: "‡πÄ‡∏ò‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏°‡∏≤ 5 ‡∏õ‡∏µ‡πÅ‡∏•‡πâ‡∏ß", english: "She has worked here for 5 years.", type: "Present Perfect - Duration", usage: "‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á" },
    { thai: "‡∏â‡∏±‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏Ç‡∏≤‡∏°‡∏≤‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏î‡πá‡∏Å", english: "I have known him since childhood.", type: "Stative Verb - Present Perfect", usage: "Stative verb ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Present Perfect" },
    { thai: "‡∏û‡∏ß‡∏Å‡πÄ‡∏Ç‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", english: "They are traveling to Chiang Mai.", type: "Action Verb - Present Continuous", usage: "Action verb ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Continuous tense ‡πÑ‡∏î‡πâ" },
    { thai: "‡∏â‡∏±‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏Å‡∏¥‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏¥‡∏ô‡πÄ‡∏î‡∏µ‡∏¢", english: "I have never eaten Indian food.", type: "Present Perfect - Never", usage: "‡πÉ‡∏ä‡πâ never ‡∏Å‡∏±‡∏ö Present Perfect" },
    { thai: "‡πÄ‡∏Ç‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô", english: "He has just arrived at the airport.", type: "Present Perfect - Just", usage: "‡πÉ‡∏ä‡πâ just ‡∏Å‡∏±‡∏ö Present Perfect" },
    { thai: "‡∏â‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∏‡∏ì", english: "I believe in you.", type: "Stative Verb - Simple Present", usage: "Stative verb ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ Continuous" },
    { thai: "‡πÄ‡∏Ç‡∏≤‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏•‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß", english: "He has already read this book.", type: "Present Perfect - Already", usage: "‡πÉ‡∏ä‡πâ already ‡∏Å‡∏±‡∏ö Present Perfect" }
  ];

  const vocabulary = [
    { word: "experience", meaning: "‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå", pronunciation: "/…™kÀàsp…™ri…ôns/", example: "I have a lot of experience in teaching." },
    { word: "journey", meaning: "‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á", pronunciation: "/Ààd í…úÀêrni/", example: "The journey has been amazing." },
    { word: "adventure", meaning: "‡∏Å‡∏≤‡∏£‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢", pronunciation: "/…ôdÀàvent É…ôr/", example: "We have had many adventures together." },
    { word: "culture", meaning: "‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°", pronunciation: "/Ààk ålt É…ôr/", example: "I love learning about different cultures." },
    { word: "hobby", meaning: "‡∏á‡∏≤‡∏ô‡∏≠‡∏î‡∏¥‡πÄ‡∏£‡∏Å", pronunciation: "/Ààh…ëÀêbi/", example: "Photography has been my hobby for years." },
    { word: "pastime", meaning: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏¢‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á", pronunciation: "/Ààp√¶sta…™m/", example: "Reading is my favorite pastime." },
    { word: "explore", meaning: "‡∏™‡∏≥‡∏£‡∏ß‡∏à", pronunciation: "/…™kÀàspl…îÀêr/", example: "We have explored many countries." },
    { word: "discover", meaning: "‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö", pronunciation: "/d…™Ààsk åv…ôr/", example: "Scientists have discovered a new species." },
    { word: "achieve", meaning: "‡∏ö‡∏£‡∏£‡∏•‡∏∏", pronunciation: "/…ôÀàt ÉiÀêv/", example: "She has achieved her goals." },
    { word: "improve", meaning: "‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á", pronunciation: "/…™mÀàpruÀêv/", example: "My English has improved a lot." },
    { word: "believe", meaning: "‡πÄ‡∏ä‡∏∑‡πà‡∏≠", pronunciation: "/b…™ÀàliÀêv/", example: "I believe in hard work." },
    { word: "understand", meaning: "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à", pronunciation: "/Àå ånd…ôrÀàst√¶nd/", example: "Do you understand the lesson?" }
  ];

  const verbCategories = {
    action: [
      { verb: "run", meaning: "‡∏ß‡∏¥‡πà‡∏á", example: "I am running in the park." },
      { verb: "eat", meaning: "‡∏Å‡∏¥‡∏ô", example: "She is eating lunch now." },
      { verb: "write", meaning: "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô", example: "He is writing a letter." },
      { verb: "dance", meaning: "‡πÄ‡∏ï‡πâ‡∏ô", example: "They are dancing beautifully." },
      { verb: "swim", meaning: "‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥", example: "We are swimming in the pool." },
      { verb: "study", meaning: "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", example: "I am studying English." }
    ],
    stative: [
      { verb: "know", meaning: "‡∏£‡∏π‡πâ", example: "I know the answer." },
      { verb: "believe", meaning: "‡πÄ‡∏ä‡∏∑‡πà‡∏≠", example: "She believes in God." },
      { verb: "love", meaning: "‡∏£‡∏±‡∏Å", example: "I love chocolate." },
      { verb: "hate", meaning: "‡πÄ‡∏Å‡∏•‡∏µ‡∏¢‡∏î", example: "He hates spicy food." },
      { verb: "understand", meaning: "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à", example: "Do you understand me?" },
      { verb: "own", meaning: "‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á", example: "They own a big house." }
    ]
  };

  const readingText = `
My Journey with Hobbies and Interests

I have always been passionate about learning new things. Over the years, I have developed many hobbies that have enriched my life in different ways.

Photography has been my main hobby for the past ten years. I have taken thousands of photos during my travels around Southeast Asia. I have captured beautiful sunsets in Bali, ancient temples in Cambodia, and bustling markets in Vietnam. Photography has taught me to see the world differently and has helped me appreciate small details in everyday life.

Recently, I have started learning to play the guitar. I have been practicing for three months now, and I can already play some simple songs. Music has become an important part of my daily routine. I believe that learning a musical instrument keeps your mind sharp and helps you express emotions in a unique way.

Reading has always been one of my favorite pastimes. This year alone, I have read over fifty books from various genres. I have discovered new authors, explored different cultures through literature, and have gained knowledge about subjects I never knew interested me. Reading has broadened my perspective and has made me more empathetic towards others.

I also love outdoor activities. I have been hiking regularly for five years, and I have climbed several mountains in northern Thailand. Exercise has always been essential for my physical and mental well-being. I have noticed that regular physical activity has improved my concentration and has given me more energy throughout the day.

Cooking is another skill I have developed recently. I have learned to prepare dishes from different countries, and I have experimented with various spices and cooking techniques. I have discovered that cooking is not just about feeding yourself; it's a creative process that brings people together.

All these hobbies have one thing in common - they have made me a more well-rounded person. I believe that having diverse interests keeps life interesting and helps you grow as an individual.
  `;

  const quizQuestions = [
    {
      id: 1,
      question: "I _____ never _____ sushi before.",
      choices: ["A. did not eat", "B. have not eaten", "C. am not eating", "D. will not eat"],
      correct: "B"
    },
    {
      id: 2,
      question: "She _____ him since 2010. (know)",
      choices: ["A. knows", "B. knew", "C. has known", "D. is knowing"],
      correct: "C"
    },
    {
      id: 3,
      question: "They _____ in London for five years.",
      choices: ["A. live", "B. lived", "C. have lived", "D. are living"],
      correct: "C"
    },
    {
      id: 4,
      question: "Which is a stative verb?",
      choices: ["A. run", "B. dance", "C. believe", "D. swim"],
      correct: "C"
    },
    {
      id: 5,
      question: "I _____ my homework already.",
      choices: ["A. finish", "B. finished", "C. have finished", "D. am finishing"],
      correct: "C"
    },
    {
      id: 6,
      question: "She _____ chocolate. (love - stative verb)",
      choices: ["A. loves", "B. is loving", "C. has loved", "D. loved"],
      correct: "A"
    },
    {
      id: 7,
      question: "We _____ this movie three times.",
      choices: ["A. watch", "B. watched", "C. have watched", "D. are watching"],
      correct: "C"
    },
    {
      id: 8,
      question: "He _____ just _____ from work.",
      choices: ["A. is returning", "B. returned", "C. has returned", "D. returns"],
      correct: "C"
    }
  ];

  return (
    <ScrollView style={styles.container}>
      <LinearGradient colors={['#667eea', '#764ba2']} style={styles.header}>
        <Text style={styles.headerTitle}>üìö ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1 My Self</Text>
        <Text style={styles.headerSubtitle}>Present Perfect & Action vs Stative Verbs</Text>
        <Text style={styles.scoreText}>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {currentScore}/{totalQuestions}</Text>
        {isPlaying && (
          <TouchableOpacity style={styles.stopButton} onPress={stopSound}>
            <Text style={styles.stopButtonText}>‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á</Text>
          </TouchableOpacity>
        )}
      </LinearGradient>
      {/* Grammar Section (unchanged) */}
      {/* ... (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ... */}
      <View style={styles.section}>
        <View style={styles.sectionDivider}>
          <Text style={styles.sectionTitle}>üìñ ‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏ß‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå</Text>
        </View>
        <View style={styles.grammarCard}>
          <View style={styles.cardBorder}>
            <Text style={styles.grammarTitle}>üéØ Present Perfect - ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</Text>
            <Text style={styles.grammarDescription}>
              Present Perfect ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠:
              {'\n'}‚Ä¢ ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ
              {'\n'}‚Ä¢ ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏ï‡πà‡∏≠
              {'\n'}‚Ä¢ ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            </Text>
            <View style={styles.formulaContainer}>
              <Text style={styles.grammarFormula}>
                <Text style={styles.formulaLabel}>‡∏™‡∏π‡∏ï‡∏£:</Text> Subject + have/has + V3 (past participle)
              </Text>
            </View>
            <View style={styles.exampleContainer}>
              <Text style={styles.grammarExample}>
                ‚úì I <Text style={styles.highlight}>have visited</Text> Japan twice. (‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå)
              </Text>
              <Text style={styles.grammarExample}>
                ‚úì She <Text style={styles.highlight}>has lived</Text> here for 5 years. (‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤)
              </Text>
              <Text style={styles.grammarExample}>
                ‚úì I <Text style={styles.highlight}>have just finished</Text> my work. (‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à)
              </Text>
            </View>
          </View>
        </View>
        <View style={styles.grammarCard}>
          <View style={styles.cardBorder}>
            <Text style={styles.grammarTitle}>‚ö° Action vs Stative Verbs - ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á</Text>
            <Text style={styles.grammarDescription}>
              <Text style={styles.boldText}>Action Verbs:</Text> ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ
              {'\n'}‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á Simple ‡πÅ‡∏•‡∏∞ Continuous tense
              {'\n'}‚Ä¢ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: run, eat, write, dance, swim
              {'\n\n'}<Text style={styles.boldText}>Stative Verbs:</Text> ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏†‡∏≤‡∏ß‡∏∞ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î
              {'\n'}‚Ä¢ ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ Continuous tense
              {'\n'}‚Ä¢ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: know, believe, love, hate, understand
            </Text>
            <View style={styles.formulaContainer}>
              <Text style={styles.grammarFormula}>
                <Text style={styles.formulaLabel}>Action:</Text> I am running now. ‚úì
              </Text>
              <Text style={styles.grammarFormula}>
                <Text style={styles.formulaLabel}>Stative:</Text> I know the answer. ‚úì (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ I am knowing ‚ùå)
              </Text>
            </View>
          </View>
        </View>
        <View style={styles.grammarCard}>
          <View style={styles.cardBorder}>
            <Text style={styles.grammarTitle}>üìã ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡∏≠‡∏á Verbs</Text>
            <View style={styles.verbSection}>
              <Text style={styles.verbCategoryTitle}>üèÉ‚Äç‚ôÇÔ∏è Action Verbs</Text>
              {verbCategories.action.map((item, index) => (
                <View key={index} style={styles.verbItem}>
                  <Text style={styles.verbText}>
                    <Text style={styles.verbWord}>{item.verb}</Text> - {item.meaning}
                  </Text>
                  <Text style={styles.verbExample}>{item.example}</Text>
                  <TouchableOpacity
                    style={[styles.miniSoundButton, isPlaying && styles.disabledButton]}
                    onPress={() => playSimpleSound(item.example)}
                    disabled={isPlaying}
                  >
                    <Text style={styles.miniSoundText}>üîä</Text>
                  </TouchableOpacity>
                </View>
              ))}
            </View>
            <View style={styles.verbSection}>
              <Text style={styles.verbCategoryTitle}>üß† Stative Verbs</Text>
              {verbCategories.stative.map((item, index) => (
                <View key={index} style={styles.verbItem}>
                  <Text style={styles.verbText}>
                    <Text style={styles.verbWord}>{item.verb}</Text> - {item.meaning}
                  </Text>
                  <Text style={styles.verbExample}>{item.example}</Text>
                  <TouchableOpacity
                    style={[styles.miniSoundButton, isPlaying && styles.disabledButton]}
                    onPress={() => playSimpleSound(item.example)}
                    disabled={isPlaying}
                  >
                    <Text style={styles.miniSoundText}>üîä</Text>
                  </TouchableOpacity>
                </View>
              ))}
            </View>
          </View>
        </View>
      </View>

      {/* Examples Section */}
      <View style={styles.section}>
        <View style={styles.sectionDivider}>
          <Text style={styles.sectionTitle}>üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ</Text>
        </View>
        {examples.map((example, index) => (
          <View key={index} style={styles.exampleCard}>
            <View style={styles.cardBorder}>
              <View style={styles.exampleHeader}>
                <Text style={styles.exampleType}>{example.type}</Text>
              </View>
              <View style={styles.exampleContent}>
                <Text style={styles.englishText}>{example.english}</Text>
                <Text style={styles.thaiText}>{example.thai}</Text>
                <Text style={styles.usageText}>üí° {example.usage}</Text>
              </View>
              <TouchableOpacity
                style={[styles.playButton, isPlaying && styles.disabledButton]}
                onPress={() => playSound(example.english, 0.7)}
                disabled={isPlaying}
              >
                <Text style={styles.playButtonText}>
                  {isPlaying ? '‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô...' : '‚ñ∂Ô∏è ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á'}
                </Text>
              </TouchableOpacity>
            </View>
          </View>
        ))}
      </View>

      {/* Vocabulary Section */}
      <View style={styles.section}>
        <View style={styles.sectionDivider}>
          <Text style={styles.sectionTitle}>üìù ‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç</Text>
        </View>
        <View style={styles.vocabContainer}>
          {vocabulary.map((vocab, index) => (
            <TouchableOpacity
              key={index}
              style={[styles.vocabCard, isPlaying && styles.disabledButton]}
              onPress={() => playSound(`${vocab.word}. ${vocab.example}`)}
              disabled={isPlaying}
            >
              <View style={styles.cardBorder}>
                <Text style={styles.vocabWord}>{vocab.word}</Text>
                <Text style={styles.vocabPronunciation}>{vocab.pronunciation}</Text>
                <Text style={styles.vocabMeaning}>{vocab.meaning}</Text>
                <Text style={styles.vocabExample}>{vocab.example}</Text>
              </View>
            </TouchableOpacity>
          ))}
        </View>
      </View>

      {/* Reading Exercise */}
      <View style={styles.section}>
        <View style={styles.sectionDivider}>
          <Text style={styles.sectionTitle}>üìò Reading: My Journey with Hobbies</Text>
        </View>
        <View style={styles.readingCard}>
          <View style={styles.cardBorder}>
            <Text style={styles.readingText}>{readingText.trim()}</Text>
          </View>
        </View>
      </View>

      {/* Quiz */}
      <View style={styles.section}>
        <View style={styles.sectionDivider}>
          <Text style={styles.sectionTitle}>üß† ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î: Present Perfect</Text>
        </View>
        {quizQuestions.map((q, qIndex) => (
          <View key={q.id} style={styles.quizCard}>
            <View style={styles.cardBorder}>
              <Text style={styles.quizQuestion}>{qIndex + 1}. {q.question}</Text>
              <View style={styles.choicesContainer}>
                {q.choices.map((choice, cIndex) => {
                  const alreadyAnswered = answeredQuestions.has(q.id);
                  const isSelected = selectedChoices[q.id] === cIndex;
                  return (
                    <TouchableOpacity
                      key={cIndex}
                      style={[
                        styles.choiceButton,
                        isSelected && styles.choiceButtonSelected,
                        alreadyAnswered && !isSelected && styles.disabledButton
                      ]}
                      disabled={alreadyAnswered}
                      onPress={() => handleQuizSubmit(q.id, choice.charAt(0), q.correct, cIndex)}
                    >
                      <Text style={[
                        styles.choiceText,
                        isSelected && styles.choiceTextSelected
                      ]}>{choice}</Text>
                    </TouchableOpacity>
                  );
                })}
              </View>
            </View>
          </View>
        ))}
      </View>

      {/* ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π */}
      <View style={styles.section}>
        <View style={styles.backButtonContainer}>
          <TouchableOpacity
            style={styles.backButton}
            onPress={() => navigation.goBack()}
          >
            <Text style={styles.backButtonText}>üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</Text>
          </TouchableOpacity>
        </View>
      </View>

      {/* Custom Alert */}
      <CustomAlert
        visible={alertVisible}
        onClose={() => setAlertVisible(false)}
        type={alertData.type}
        title={alertData.title}
        message={alertData.message}
        buttonText={alertData.buttonText}
      />
    </ScrollView>
  );
}

// Enhanced Styles
const styles = StyleSheet.create({
  container: { 
    backgroundColor: '#f5f7fb', 
    flex: 1 
  },
  header: { 
    padding: 20, 
    borderRadius: 15, 
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 8,
  },
  headerTitle: { 
    fontSize: 28, 
    color: '#fff', 
    fontWeight: 'bold',
    textAlign: 'center'
  },
  headerSubtitle: { 
    fontSize: 16, 
    color: '#f0f0f0', 
    marginTop: 5,
    textAlign: 'center'
  },
  scoreText: { 
    marginTop: 15, 
    fontSize: 18, 
    color: '#fff',
    textAlign: 'center',
    fontWeight: 'bold'
  },
  stopButton: { 
    marginTop: 15, 
    padding: 12, 
    backgroundColor: '#ff5252', 
    borderRadius: 10,
    alignSelf: 'center'
  },
  stopButtonText: { 
    color: '#fff', 
    textAlign: 'center',
    fontWeight: 'bold'
  },
  section: { 
    marginBottom: 25, 
    paddingHorizontal: 15 
  },
  sectionDivider: {
    borderBottomWidth: 3,
    borderBottomColor: '#667eea',
    marginBottom: 20,
    paddingBottom: 10
  },
    sectionDivider: {
    borderBottomWidth: 3,
    borderBottomColor: '#667eea',
    marginBottom: 20,
    paddingBottom: 5,
  },
  grammarCard: { 
    backgroundColor: '#fff', 
    borderRadius: 12, 
    padding: 16, 
    marginBottom: 16, 
    elevation: 2 
  },
  grammarTitle: { 
    fontSize: 18, 
    fontWeight: 'bold', 
    marginBottom: 8, 
    color: '#4b4b4b' 
  },
  grammarDescription: { 
    fontSize: 15, 
    color: '#333' 
  },
  formulaContainer: { 
    marginTop: 12 
  },
  grammarFormula: { 
    fontSize: 15, 
    fontStyle: 'italic' 
  },
  exampleContainer: { 
    marginTop: 10 
  },
  grammarExample: { 
    fontSize: 15, 
    color: '#444', 
    marginTop: 4 
  },
  formulaLabel: { 
    fontWeight: 'bold' 
  },
  highlight: { 
    color: '#764ba2', 
    fontWeight: 'bold' 
  },
  boldText: { 
    fontWeight: 'bold' 
  },
  cardBorder: {
    borderWidth: 1.5,
    borderColor: '#e0e7ff',
    borderRadius: 10,
    padding: 8,
    backgroundColor: '#f9f9ff'
  },
  verbSection: {
    marginTop: 6
  },
  verbCategoryTitle: { 
    marginTop: 8, 
    fontWeight: 'bold', 
    fontSize: 16, 
    color: '#5c5c8a' 
  },
  verbItem: { 
    marginVertical: 6, 
    padding: 8, 
    backgroundColor: '#eef', 
    borderRadius: 8, 
    flexDirection: 'row', 
    alignItems: 'center', 
    justifyContent: 'space-between'
  },
  verbText: { 
    fontSize: 15, 
    flex: 1 
  },
  verbWord: { 
    fontWeight: 'bold' 
  },
  verbExample: { 
    fontStyle: 'italic', 
    marginTop: 2, 
    fontSize: 14, 
    color: '#666' 
  },
  miniSoundButton: { 
    alignSelf: 'flex-start', 
    marginLeft: 8, 
    backgroundColor: '#ccc', 
    padding: 4, 
    borderRadius: 6 
  },
  miniSoundText: { 
    fontSize: 15 
  },
  disabledButton: { 
    opacity: 0.45 
  },
  // Example Sentence Card
  exampleCard: { 
    backgroundColor: '#fff', 
    padding: 13, 
    marginBottom: 10, 
    borderRadius: 12, 
    elevation: 1
  },
  exampleHeader: { 
    marginBottom: 2 
  },
  exampleType: { 
    fontWeight: 'bold', 
    fontSize: 16, 
    color: '#6366f1' 
  },
  exampleContent: { 
    marginTop: 5 
  },
  englishText: { 
    fontSize: 16, 
    marginBottom: 3, 
    color: '#1e293b' 
  },
  thaiText: { 
    fontSize: 15, 
    color: '#555' 
  },
  usageText: { 
    fontSize: 14, 
    marginTop: 4, 
    fontStyle: 'italic', 
    color: '#7950f2' 
  },
  playButton: { 
    marginTop: 8, 
    backgroundColor: '#667eea', 
    padding: 8, 
    borderRadius: 8,
    alignItems: 'center'
  },
  playButtonText: { 
    color: '#fff', 
    textAlign: 'center' 
  },
  // Vocabulary
  vocabContainer: { 
    flexDirection: 'row', 
    flexWrap: 'wrap', 
    justifyContent: 'space-between' 
  },
  vocabCard: { 
    width: width / 2 - 20, 
    backgroundColor: '#fff', 
    padding: 12, 
    borderRadius: 11, 
    marginBottom: 12 
  },
  vocabWord: { 
    fontWeight: 'bold', 
    fontSize: 16, 
    color: '#333' 
  },
  vocabPronunciation: { 
    fontStyle: 'italic', 
    fontSize: 14, 
    color: '#4f4f4f' 
  },
  vocabMeaning: { 
    fontSize: 15, 
    color: '#444' 
  },
  vocabExample: { 
    fontSize: 14, 
    color: '#666', 
    marginTop: 4 
  },
  // Reading Card
  readingCard: { 
    backgroundColor: '#fff', 
    padding: 15, 
    borderRadius: 12 
  },
  readingText: { 
    fontSize: 15, 
    lineHeight: 22, 
    color: '#333' 
  },
  // Quiz Section
  quizCard: { 
    backgroundColor: '#fff', 
    padding: 13, 
    borderRadius: 12, 
    marginBottom: 14, 
    elevation: 1
  },
  quizQuestion: { 
    fontSize: 16, 
    fontWeight: 'bold', 
    marginBottom: 10, 
    color: '#22223b' 
  },
  choicesContainer: { 
    flexDirection: 'column', 
    marginTop: 3 
  },
  choiceButton: { 
    backgroundColor: '#f1f1f1', 
    padding: 10, 
    borderRadius: 8, 
    marginVertical: 4 
  },
  choiceText: { 
    fontSize: 15, 
    color: '#222' 
  },
  // Back Button
  backButtonContainer: {
    alignItems: 'center',
    marginTop: 10
  },
  backButton: {
    backgroundColor: '#764ba2',
    borderRadius: 10,
    paddingVertical: 10,
    paddingHorizontal: 26
  },
  backButtonText: {
    color: '#fff',
    fontSize: 17,
    fontWeight: 'bold'
  },
  // Custom Modal
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(50,50,60,0.35)',
    justifyContent: 'center',
    alignItems: 'center'
  },
  modalContainer: {
    width: width * 0.8,
    backgroundColor: '#fff',
    borderRadius: 16,
    overflow: 'hidden'
  },
  modalHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 18,
    borderTopLeftRadius: 16,
    borderTopRightRadius: 16
  },
  modalIcon: {
    fontSize: 28,
    marginRight: 10
  },
  modalTitle: {
    fontSize: 19,
    fontWeight: 'bold',
    color: '#fff'
  },
  modalBody: {
    padding: 16
  },
  modalMessage: {
    fontSize: 16,
    color: '#333'
  },
  modalFooter: {
    borderTopWidth: 1,
    borderTopColor: '#eee',
    padding: 13,
    alignItems: 'center'
  },
  modalButton: {
    paddingVertical: 8,
    paddingHorizontal: 30,
    borderRadius: 8
  },
  modalButtonText: {
    color: '#fff',
    fontWeight: 'bold',
    fontSize: 16
  }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏° styles ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ selected
// (‡∏ô‡∏≥ style ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏£‡∏ß‡∏°‡πÑ‡∏ß‡πâ‡πÉ‡∏ô object styles ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà)
Object.assign(styles, {
  choiceButton: {
    backgroundColor: '#f1f1f1',
    padding: 10,
    borderRadius: 8,
    marginVertical: 4,
    borderWidth: 1,
    borderColor: '#f1f1f1'
  },
  choiceButtonSelected: {
    backgroundColor: '#a18ff5',
    borderColor: '#6c47e4'
  },
  choiceText: {
    fontSize: 15,
    color: '#222'
  },
  choiceTextSelected: {
    color: '#fff',
    fontWeight: 'bold'
  }
});
// (‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô styles ‡πÄ‡∏î‡∏¥‡∏°)

