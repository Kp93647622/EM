import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Alert, Dimensions } from 'react-native';
import { Audio } from 'expo-av';
import { useNavigation } from '@react-navigation/native';
import { LinearGradient } from 'expo-linear-gradient';

const { width } = Dimensions.get('window');

export default function ConditionalSentencesLesson() {
  const navigation = useNavigation();
  const [sound, setSound] = useState();
  const [currentScore, setCurrentScore] = useState(0);
  const [totalQuestions] = useState(30);
  const [answeredQuestions, setAnsweredQuestions] = useState(new Set());
  const [isLoading, setIsLoading] = useState(false);
  const [playingId, setPlayingId] = useState(null);

  // Cleanup sound when component unmounts
  useEffect(() => {
    return () => {
      if (sound) {
        sound.unloadAsync();
      }
    };
  }, [sound]);

  const playSound = async (text, rate = 0.8, id = null) => {
    try {
      setIsLoading(true);
      setPlayingId(id);
      
      // ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      if (sound) {
        await sound.unloadAsync();
      }
      
      // ‡πÉ‡∏ä‡πâ Web Speech API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Text-to-Speech
      if (typeof window !== 'undefined' && window.speechSynthesis) {
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.rate = rate;
        utterance.lang = 'en-US';
        utterance.onend = () => {
          setIsLoading(false);
          setPlayingId(null);
        };
        utterance.onerror = () => {
          setIsLoading(false);
          setPlayingId(null);
          playWithAPI(text, rate);
        };
        window.speechSynthesis.speak(utterance);
        return;
      }
      
      await playWithAPI(text, rate);
      
    } catch (error) {
      console.log('TTS Error:', error);
      setIsLoading(false);
      setPlayingId(null);
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ');
    }
  };

  const playWithAPI = async (text, rate = 0.8) => {
    try {
      const response = await fetch(
        `https://api.streamelements.com/kappa/v2/speech?voice=Brian&text=${encodeURIComponent(text)}&speed=${rate}`
      );
      
      if (!response.ok) {
        throw new Error('API response not ok');
      }
      
      const responseText = await response.text();
      let data;
      
      try {
        data = JSON.parse(responseText);
      } catch (parseError) {
        console.log('JSON Parse Error - Response:', responseText);
        throw new Error('Invalid JSON response');
      }
      
      if (data.url) {
        const { sound: newSound } = await Audio.Sound.createAsync({ uri: data.url });
        setSound(newSound);
        await newSound.playAsync();
        
        newSound.setOnPlaybackStatusUpdate((status) => {
          if (status.didJustFinish) {
            setIsLoading(false);
            setPlayingId(null);
          }
        });
      }
      
    } catch (error) {
      console.log('TTS Error:', error);
      Alert.alert('‡πÄ‡∏™‡∏µ‡∏¢‡∏á', text);
      setIsLoading(false);
      setPlayingId(null);
    }
  };

  const stopSound = async () => {
    if (sound) {
      await sound.stopAsync();
      setIsLoading(false);
      setPlayingId(null);
    }
    
    if (typeof window !== 'undefined' && window.speechSynthesis) {
      window.speechSynthesis.cancel();
    }
  };

  const handleQuizSubmit = (questionId, answer, correctAnswer) => {
    if (answeredQuestions.has(questionId)) {
      Alert.alert('‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', '‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß');
      return;
    }

    const newAnsweredQuestions = new Set(answeredQuestions);
    newAnsweredQuestions.add(questionId);
    setAnsweredQuestions(newAnsweredQuestions);

    if (answer === correctAnswer) {
      setCurrentScore(currentScore + 1);
      Alert.alert('üéâ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!', '‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', [
        { text: '‡∏ï‡πà‡∏≠‡πÑ‡∏õ', onPress: () => playSound('Excellent! Well done!') }
      ]);
    } else {
      Alert.alert('‚ùå ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', '‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏∑‡∏≠: ' + correctAnswer, [
        { text: '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß', onPress: () => playSound('Try again! You can do it!') }
      ]);
    }
  };

  const examples = [
    {
      id: 'ex1',
      thai: "‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏∏‡πà‡∏ô‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á ‡∏°‡∏±‡∏ô‡∏à‡∏∞‡∏•‡∏∞‡∏•‡∏≤‡∏¢",
      english: "If you heat ice, it melts.",
      type: "Type 0 (Zero Conditional)",
      situation: "‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πá‡∏à‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏Å‡∏é‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥"
    },
    {
      id: 'ex2',
      thai: "‡∏ñ‡πâ‡∏≤‡∏ù‡∏ô‡∏ï‡∏Å ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô",
      english: "If it rains, we will stay at home.",
      type: "Type 1 (First Conditional)",
      situation: "‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï"
    },
    {
      id: 'ex3',
      thai: "‡∏ñ‡πâ‡∏≤‡∏â‡∏±‡∏ô‡∏£‡∏ß‡∏¢ ‡∏â‡∏±‡∏ô‡∏à‡∏∞‡∏ã‡∏∑‡πâ‡∏≠‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏´‡∏ç‡πà",
      english: "If I were rich, I would buy a big house.",
      type: "Type 2 (Second Conditional)",
      situation: "‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏¥‡∏ô‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"
    },
    {
      id: 'ex4',
      thai: "‡∏ô‡πâ‡∏≥‡∏à‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏î‡∏ó‡∏µ‡πà 100 ‡∏≠‡∏á‡∏®‡∏≤‡πÄ‡∏ã‡∏•‡πÄ‡∏ã‡∏µ‡∏¢‡∏™",
      english: "Water boils at 100 degrees Celsius.",
      type: "Type 0 (Zero Conditional)",
      situation: "‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πá‡∏à‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå"
    },
    {
      id: 'ex5',
      thai: "‡∏ñ‡πâ‡∏≤‡πÄ‡∏ò‡∏≠‡∏°‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡∏ô‡∏∏‡∏Å‡∏°‡∏≤‡∏Å",
      english: "If she comes to the party, we will have a lot of fun.",
      type: "Type 1 (First Conditional)",
      situation: "‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï"
    },
    {
      id: 'ex6',
      thai: "‡∏ñ‡πâ‡∏≤‡∏â‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏Å ‡∏â‡∏±‡∏ô‡∏à‡∏∞‡∏ö‡∏¥‡∏ô‡πÑ‡∏õ‡∏ó‡∏±‡πà‡∏ß‡πÇ‡∏•‡∏Å",
      english: "If I were a bird, I would fly around the world.",
      type: "Type 2 (Second Conditional)",
      situation: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏¥‡∏ô‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ"
    }
  ];

  const vocabulary = [
    { 
      id: 'v1',
      word: "condition", 
      meaning: "‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç", 
      pronunciation: "/k…ônÀàd…™ É…ôn/",
      phonetic: "‡∏Ñ‡∏∂‡∏ô-‡∏î‡∏¥-‡∏ä‡∏±‡πà‡∏ô"
    },
    { 
      id: 'v2',
      word: "consequence", 
      meaning: "‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏°‡∏≤", 
      pronunciation: "/Ààk…íns…™kw…ôns/",
      phonetic: "‡∏Ñ‡∏≠‡∏ô-‡∏ã‡∏¥-‡∏Ñ‡∏ß‡∏∂‡∏ô-‡∏ã‡πå"
    },
    { 
      id: 'v3',
      word: "hypothetical", 
      meaning: "‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ê‡∏≤‡∏ô", 
      pronunciation: "/Àåha…™p…ôÀàŒ∏et…™k…ôl/",
      phonetic: "‡πÑ‡∏Æ-‡πÇ‡∏õ-‡πÄ‡∏ò-‡∏ï‡∏¥-‡πÄ‡∏Ñ‡∏¥‡∏•"
    },
    { 
      id: 'v4',
      word: "possibility", 
      meaning: "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ", 
      pronunciation: "/Àåp…ís…ôÀàb…™l…ôti/",
      phonetic: "‡∏û‡∏≠‡∏™-‡∏ã‡∏¥-‡∏ö‡∏¥-‡∏•‡∏¥-‡∏ó‡∏µ"
    },
    { 
      id: 'v5',
      word: "imagination", 
      meaning: "‡∏à‡∏¥‡∏ô‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£", 
      pronunciation: "/…™Àåm√¶d í…™Ààne…™ É…ôn/",
      phonetic: "‡∏≠‡∏¥-‡πÅ‡∏°‡∏à-‡∏à‡∏¥-‡πÄ‡∏ô-‡∏ä‡∏±‡πà‡∏ô"
    },
    { 
      id: 'v6',
      word: "reality", 
      meaning: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á", 
      pronunciation: "/riÀà√¶l…ôti/",
      phonetic: "‡∏£‡∏µ-‡πÅ‡∏≠‡∏•-‡∏•‡∏¥-‡∏ó‡∏µ"
    },
    { 
      id: 'v7',
      word: "unlikely", 
      meaning: "‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô", 
      pronunciation: "/ ånÀàla…™kli/",
      phonetic: "‡∏≠‡∏±‡∏ô-‡πÑ‡∏•‡∏Ñ‡πå-‡∏•‡∏µ"
    },
    { 
      id: 'v8',
      word: "probable", 
      meaning: "‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ", 
      pronunciation: "/Ààpr…íb…ôb…ôl/",
      phonetic: "‡∏û‡∏£‡∏≠‡∏ö-‡∏ö‡∏∞-‡πÄ‡∏ö‡∏¥‡∏•"
    },
    { 
      id: 'v9',
      word: "circumstances", 
      meaning: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå", 
      pronunciation: "/Ààs…úÀêk…ômst…ôns…™z/",
      phonetic: "‡πÄ‡∏ã‡∏≠‡∏£‡πå-‡∏Ñ‡∏±‡∏°-‡∏™‡πÅ‡∏ï‡∏ô-‡∏ã‡∏¥‡∏ã"
    },
    { 
      id: 'v10',
      word: "achieve", 
      meaning: "‡∏ö‡∏£‡∏£‡∏•‡∏∏", 
      pronunciation: "/…ôÀàt ÉiÀêv/",
      phonetic: "‡∏≠‡∏∞-‡∏ä‡∏µ‡∏ü"
    }
  ];

  const quizQuestions = [
    // Type 0 Questions (1-10)
    {
      id: 1,
      question: "If you _____ water to 100¬∞C, it _____.",
      choices: ["A. heat / boils", "B. will heat / boil", "C. heated / would boil", "D. heat / will boil"],
      correct: "A",
      type: "Type 0",
      explanation: "‡πÉ‡∏ä‡πâ Type 0 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πá‡∏à‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏≤‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡πÉ‡∏ä‡πâ Present Simple ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô"
    },
    {
      id: 2,
      question: "When the sun _____, it _____ dark.",
      choices: ["A. will set / becomes", "B. sets / becomes", "C. set / will become", "D. sets / will become"],
      correct: "B",
      type: "Type 0",
      explanation: "‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πá‡∏à‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏™‡∏°‡∏≠ ‡πÉ‡∏ä‡πâ Present Simple ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà"
    },
    {
      id: 3,
      question: "If plants _____ water, they _____.",
      choices: ["A. don't get / die", "B. won't get / die", "C. didn't get / would die", "D. don't get / will die"],
      correct: "A",
      type: "Type 0",
      explanation: "‡∏Å‡∏é‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡πÉ‡∏ä‡πâ Present Simple ‡πÉ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô"
    },
    {
      id: 4,
      question: "When you _____ oil and water, they _____ mix.",
      choices: ["A. will combine / don't", "B. combine / don't", "C. combined / wouldn't", "D. combine / won't"],
      correct: "B",
      type: "Type 0",
      explanation: "‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πá‡∏à‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡πÉ‡∏ä‡πâ Present Simple"
    },
    {
      id: 5,
      question: "If you _____ exercise regularly, you _____ healthier.",
      choices: ["A. will do / become", "B. did / would become", "C. do / become", "D. do / will become"],
      correct: "C",
      type: "Type 0",
      explanation: "‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πá‡∏à‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"
    },
    {
      id: 6,
      question: "When it _____, the ground _____ wet.",
      choices: ["A. will rain / gets", "B. rains / gets", "C. rained / would get", "D. rains / will get"],
      correct: "B",
      type: "Type 0",
      explanation: "‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ù‡∏ô‡∏ï‡∏Å"
    },
    {
      id: 7,
      question: "If you _____ iron in water, it _____.",
      choices: ["A. leave / rusts", "B. will leave / rust", "C. left / would rust", "D. leave / will rust"],
      correct: "A",
      type: "Type 0",
      explanation: "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡πÄ‡∏Ñ‡∏°‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏™‡∏°‡∏≠"
    },
    {
      id: 8,
      question: "When people _____ too much, they _____ weight.",
      choices: ["A. will eat / gain", "B. eat / gain", "C. ate / would gain", "D. eat / will gain"],
      correct: "B",
      type: "Type 0",
      explanation: "‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πá‡∏à‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£"
    },
    {
      id: 9,
      question: "If you _____ sugar in coffee, it _____ sweet.",
      choices: ["A. add / tastes", "B. will add / taste", "C. added / would taste", "D. add / will taste"],
      correct: "A",
      type: "Type 0",
      explanation: "‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏™‡πà‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•"
    },
    {
      id: 10,
      question: "When the temperature _____ below 0¬∞C, water _____.",
      choices: ["A. will drop / freezes", "B. drops / freezes", "C. dropped / would freeze", "D. drops / will freeze"],
      correct: "B",
      type: "Type 0",
      explanation: "‡∏Å‡∏é‡∏ó‡∏≤‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πá‡∏á‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏ô‡πâ‡∏≥"
    },
    
    // Type 1 Questions (11-20)
    {
      id: 11,
      question: "If it _____ tomorrow, we _____ to the beach.",
      choices: ["A. rains / won't go", "B. will rain / don't go", "C. rained / wouldn't go", "D. rain / won't go"],
      correct: "A",
      type: "Type 1",
      explanation: "‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ Present Simple + will"
    },
    {
      id: 12,
      question: "If she _____ hard, she _____ the exam.",
      choices: ["A. will study / passes", "B. studies / will pass", "C. studied / would pass", "D. study / will pass"],
      correct: "B",
      type: "Type 1",
      explanation: "‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï"
    },
    {
      id: 13,
      question: "We _____ late if we _____ now.",
      choices: ["A. will be / don't leave", "B. are / won't leave", "C. would be / didn't leave", "D. will be / won't leave"],
      correct: "A",
      type: "Type 1",
      explanation: "‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç"
    },
    {
      id: 14,
      question: "If you _____ me, I _____ you back.",
      choices: ["A. will call / call", "B. call / will call", "C. called / would call", "D. call / call"],
      correct: "B",
      type: "Type 1",
      explanation: "‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏°‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï"
    },
    {
      id: 15,
      question: "If they _____ the project on time, they _____ a bonus.",
      choices: ["A. will finish / get", "B. finish / will get", "C. finished / would get", "D. finish / get"],
      correct: "B",
      type: "Type 1",
      explanation: "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏´‡∏≤‡∏Å‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç"
    },
    {
      id: 16,
      question: "If I _____ enough money, I _____ a new car.",
      choices: ["A. will save / buy", "B. save / will buy", "C. saved / would buy", "D. save / buy"],
      correct: "B",
      type: "Type 1",
      explanation: "‡πÅ‡∏ú‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ"
    },
    {
      id: 17,
      question: "She _____ angry if you _____ her the truth.",
      choices: ["A. will be / don't tell", "B. is / won't tell", "C. would be / didn't tell", "D. will be / won't tell"],
      correct: "A",
      type: "Type 1",
      explanation: "‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï"
    },
    {
      id: 18,
      question: "If we _____ early, we _____ traffic.",
      choices: ["A. will leave / avoid", "B. leave / will avoid", "C. left / would avoid", "D. leave / avoid"],
      correct: "B",
      type: "Type 1",
      explanation: "‡∏ß‡∏¥‡∏ò‡∏µ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï"
    },
    {
      id: 19,
      question: "If the weather _____ nice, we _____ a picnic.",
      choices: ["A. will be / have", "B. is / will have", "C. was / would have", "D. is / have"],
      correct: "B",
      type: "Type 1",
      explanation: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÑ‡∏ß‡πâ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®"
    },
    {
      id: 20,
      question: "If you ____ exercise, you _____ feel better.",
      choices: ["A. will do / feel", "B. do / will feel", "C. did / would feel", "D. do / feel"],
      correct: "B",
      type: "Type 1",
      explanation: "‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢"
    },

    // Type 2 Questions (21-30)
    {
      id: 21,
      question: "If I _____ rich, I _____ travel around the world.",
      choices: ["A. am / will travel", "B. was / will travel", "C. were / would travel", "D. will be / travel"],
      correct: "C",
      type: "Type 2",
      explanation: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏¥‡∏ô‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÉ‡∏ä‡πâ were + would"
    },
    {
      id: 22,
      question: "If she _____ more time, she _____ learn Spanish.",
      choices: ["A. has / will learn", "B. had / would learn", "C. will have / learns", "D. have / would learn"],
      correct: "B",
      type: "Type 2",
      explanation: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"
    },
    {
      id: 23,
      question: "If we _____ a bigger house, we _____ a party.",
      choices: ["A. have / will have", "B. had / would have", "C. will have / have", "D. had / will have"],
      correct: "B",
      type: "Type 2",
      explanation: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏¥‡∏ô‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏à‡∏£‡∏¥‡∏á"
    },
    {
      id: 24,
      question: "If I _____ you, I _____ that job.",
      choices: ["A. am / will take", "B. was / will take", "C. were / would take", "D. will be / take"],
      correct: "C",
      type: "Type 2",
      explanation: "‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ‡πÉ‡∏ä‡πâ If I were you (‡∏™‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡∏ó‡∏µ‡πà)"
    },
    {
      id: 25,
      question: "If they _____ harder, they _____ more successful.",
      choices: ["A. work / will be", "B. worked / would be", "C. will work / are", "D. worked / will be"],
      correct: "B",
      type: "Type 2",
      explanation: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏û‡∏ß‡∏Å‡πÄ‡∏Ç‡∏≤‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å"
    },
    {
      id: 26,
      question: "If it _____ so expensive, I _____ it.",
      choices: ["A. isn't / will buy", "B. wasn't / would buy", "C. won't be / buy", "D. weren't / would buy"],
      correct: "D",
      type: "Type 2",
      explanation: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á (‡∏°‡∏±‡∏ô‡πÅ‡∏û‡∏á‡∏à‡∏£‡∏¥‡∏á)"
    },
    {
      id: 27,
      question: "If he _____ French, he _____ in Paris.",
      choices: ["A. speaks / will work", "B. spoke / would work", "C. will speak / works", "D. spoke / will work"],
      correct: "B",
      type: "Type 2",
      explanation: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"
    },
    {
      id: 28,
      question: "If we _____ wings, we _____ fly.",
      choices: ["A. have / will fly", "B. had / would fly", "C. will have / fly", "D. had / will fly"],
      correct: "B",
      type: "Type 2",
      explanation: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏µ‡∏Å)"
    },
    {
      id: 29,
      question: "If I _____ the lottery, I _____ my job.",
      choices: ["A. win / will quit", "B. won / would quit", "C. will win / quit", "D. won / will quit"],
      correct: "B",
      type: "Type 2",
      explanation: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô (‡∏ñ‡∏π‡∏Å‡∏´‡∏ß‡∏¢)"
    },
    {
      id: 30,
      question: "If she _____ so busy, she _____ us more often.",
      choices: ["A. isn't / will visit", "B. wasn't / would visit", "C. won't be / visits", "D. weren't / would visit"],
      correct: "D",
      type: "Type 2",
      explanation: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á (‡πÄ‡∏ò‡∏≠‡∏¢‡∏∏‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á)"
    }
  ];

  const AudioButton = ({ text, id, style, textStyle, children, rate = 0.8 }) => {
    const isPlaying = playingId === id && isLoading;
    
    return (
      <TouchableOpacity 
        style={[style, isPlaying && styles.playingButton]}
        onPress={() => isPlaying ? stopSound() : playSound(text, rate, id)}
        disabled={isLoading && playingId !== id}
      >
        <Text style={[textStyle, isPlaying && styles.playingButtonText]}>
          {isPlaying ? '‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î' : children}
        </Text>
      </TouchableOpacity>
    );
  };

  return (
    <ScrollView style={styles.container}>
      {/* Header */}
      <LinearGradient
        colors={['#667eea', '#764ba2']}
        style={styles.header}
      >
        <Text style={styles.headerTitle}>üîó Conditional Sentences</Text>
        <Text style={styles.headerSubtitle}>Type 0, 1, 2</Text>
        <Text style={styles.scoreText}>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {currentScore}/{totalQuestions}</Text>
        
        {isLoading && (
          <TouchableOpacity 
            style={styles.stopAllButton}
            onPress={stopSound}
          >
            <Text style={styles.stopAllButtonText}>‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</Text>
          </TouchableOpacity>
        )}
      </LinearGradient>

      {/* Grammar Rules */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>üìñ ‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏ß‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå</Text>
        
        <View style={styles.grammarCard}>
          <Text style={styles.grammarTitle}>üîÑ Type 0 (Zero Conditional)</Text>
          <Text style={styles.grammarDescription}>
            ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πá‡∏à‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏Å‡∏é‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏™‡∏°‡∏≠
          </Text>
          <Text style={styles.grammarFormula}>
            <Text style={styles.formulaLabel}>‡∏™‡∏π‡∏ï‡∏£:</Text> If + Present Simple, Present Simple
          </Text>
          <Text style={styles.grammarExample}>
            ‚úì If you <Text style={styles.highlight}>heat</Text> water, it <Text style={styles.highlight}>boils</Text>.
          </Text>
          <Text style={styles.usageNote}>
            üí° ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠: ‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πá‡∏à‡∏à‡∏£‡∏¥‡∏á, ‡∏Å‡∏é‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥, ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏™‡∏°‡∏≠
          </Text>
          <AudioButton 
            text="Type zero conditional is used for general facts and natural laws. For example: If you heat water, it boils."
            id="type0-explanation"
            style={styles.soundButton}
            textStyle={styles.soundButtonText}
            rate={0.7}
          >
            üîä ‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
          </AudioButton>
        </View>

        <View style={styles.grammarCard}>
          <Text style={styles.grammarTitle}>üéØ Type 1 (First Conditional)</Text>
          <Text style={styles.grammarDescription}>
            ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á
          </Text>
          <Text style={styles.grammarFormula}>
            <Text style={styles.formulaLabel}>‡∏™‡∏π‡∏ï‡∏£:</Text> If + Present Simple, will + V1
          </Text>
          <Text style={styles.grammarExample}>
            ‚úì If it <Text style={styles.highlight}>rains</Text>, we <Text style={styles.highlight}>will stay</Text> home.
          </Text>
          <Text style={styles.usageNote}>
            üí° ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠: ‡πÅ‡∏ú‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï, ‡∏™‡∏±‡∏ç‡∏ç‡∏≤, ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô, ‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
          </Text>
          <AudioButton 
            text="First conditional is used for real possibilities in the future. For example: If it rains, we will stay home."
            id="type1-explanation"
            style={styles.soundButton}
            textStyle={styles.soundButtonText}
            rate={0.7}
          >
            üîä ‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
          </AudioButton>
        </View>

        <View style={styles.grammarCard}>
          <Text style={styles.grammarTitle}>üí≠ Type 2 (Second Conditional)</Text>
          <Text style={styles.grammarDescription}>
            ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏¥‡∏ô‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
          </Text>
          <Text style={styles.grammarFormula}>
            <Text style={styles.formulaLabel}>‡∏™‡∏π‡∏ï‡∏£:</Text> If + Past Simple, would + V1
          </Text>
          <Text style={styles.grammarExample}>
            ‚úì If I <Text style={styles.highlight}>were</Text> you, I <Text style={styles.highlight}>would study</Text> more.
          </Text>
          <Text style={styles.usageNote}>
            üí° ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠: ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥, ‡∏™‡∏°‡∏°‡∏ï‡∏¥, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô, ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
          </Text>
          <AudioButton 
            text="Second conditional is used for imaginary or unreal situations in the present. For example: If I were you, I would study more."
            id="type2-explanation"
            style={styles.soundButton}
            textStyle={styles.soundButtonText}
            rate={0.7}
          >
            üîä ‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
          </AudioButton>
        </View>
      </View>

      {/* Examples Section */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>üìñ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ</Text>
        {examples.map((ex, i) => (
          <View key={i} style={styles.exampleCard}>
            <Text style={styles.grammarTitle}>{ex.type}</Text>
            <Text style={styles.grammarExample}>{ex.english}</Text>
            <Text style={styles.thaiText}>({ex.thai})</Text>
            <Text style={styles.usageNote}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå: {ex.situation}</Text>
            <AudioButton 
              text={ex.english} 
              id={`example-${i}`} 
              style={styles.soundButton} 
              textStyle={styles.soundButtonText}
            >
              üîä ‡∏ù‡∏∂‡∏Å‡∏ü‡∏±‡∏á
            </AudioButton>
          </View>
        ))}
      </View>

      {/* Vocabulary Section */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>üéß ‡∏®‡∏±‡∏û‡∏ó‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç</Text>
        {vocabulary.map((v, idx) => (
          <View key={v.id} style={styles.vocabCard}>
            <Text style={styles.vocabWord}>{v.word} ({v.pronunciation})</Text>
            <Text style={styles.thaiText}>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢: {v.meaning} | ‡∏≠‡πà‡∏≤‡∏ô‡∏ß‡πà‡∏≤: {v.phonetic}</Text>
            <AudioButton 
              text={v.word} 
              id={`vocab-${idx}`} 
              style={styles.soundButtonMini} 
              textStyle={styles.soundButtonMiniText}
            >
              üîä ‡∏ü‡∏±‡∏á
            </AudioButton>
          </View>
        ))}
      </View>

      {/* ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î Section */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>‚ú® ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î 30 ‡∏Ç‡πâ‡∏≠</Text>
        {quizQuestions.map((q) => (
          <View key={q.id} style={styles.quizCard}>
            <Text style={styles.quizQuestion}>({q.type}) ‡∏Ç‡πâ‡∏≠ {q.id}: {q.question}</Text>
            {q.choices.map((choice, i) => (
              <TouchableOpacity 
                key={i} 
                onPress={() => handleQuizSubmit(q.id, choice[0], q.correct)}
                style={styles.choiceButton}
              >
                <Text>{choice}</Text>
              </TouchableOpacity>
            ))}
          </View>
        ))}
      </View>

      {/* Footer */}
      <View style={styles.footer}>
        <Text style={styles.scoreText}>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: {currentScore}/{totalQuestions}</Text>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#F0F4FF' },
  header: { padding: 20, paddingTop: 50, alignItems: 'center' },
  headerTitle: { fontSize: 24, color: '#fff', fontWeight: 'bold' },
  headerSubtitle: { fontSize: 18, color: '#E0E7FF' },
  scoreText: { marginTop: 10, fontSize: 16, color: '#fff' },
  stopAllButton: { marginTop: 10, backgroundColor: '#EF4444', padding: 10, borderRadius: 8 },
  stopAllButtonText: { color: '#fff', fontWeight: 'bold' },
  section: { padding: 15 },
  sectionTitle: { fontSize: 20, fontWeight: 'bold', marginBottom: 10, color: '#374151' },
  grammarCard: { backgroundColor: '#fff', padding: 15, borderRadius: 10, marginBottom: 15 },
  grammarTitle: { fontSize: 16, fontWeight: 'bold', color: '#2563EB' },
  grammarDescription: { fontSize: 14, marginVertical: 5 },
  grammarFormula: { fontSize: 14, fontWeight: '500', color: '#444' },
  formulaLabel: { fontWeight: 'bold', color: '#F43F5E' },
  grammarExample: { fontSize: 14, color: '#10B981', marginVertical: 4 },
  highlight: { fontWeight: 'bold', color: '#EC4899' },
  usageNote: { fontSize: 13, color: '#6B7280', marginVertical: 3 },
  soundButton: { marginTop: 8, backgroundColor: '#F472B6', padding: 10, borderRadius: 8 },
  soundButtonText: { color: '#fff', fontWeight: 'bold', textAlign: 'center' },
  exampleCard: { backgroundColor: '#E0F2FE', padding: 10, borderRadius: 10, marginBottom: 10 },
  thaiText: { fontSize: 13, color: '#4B5563' },
  vocabCard: { backgroundColor: '#FFF0F6', padding: 10, borderRadius: 10, marginBottom: 8 },
  vocabWord: { fontWeight: 'bold', fontSize: 15, color: '#DB2777' },
  soundButtonMini: { marginTop: 5, backgroundColor: '#FBCFE8', padding: 6, borderRadius: 6 },
  soundButtonMiniText: { color: '#9D174D', textAlign: 'center', fontSize: 12 },
  quizCard: { backgroundColor: '#fff', padding: 10, marginBottom: 15, borderRadius: 8 },
  quizQuestion: { fontWeight: 'bold', marginBottom: 5 },
  choiceButton: { backgroundColor: '#E0E7FF', padding: 8, borderRadius: 6, marginVertical: 3 },
  footer: { alignItems: 'center', paddingBottom: 40 },
  playingButton: { backgroundColor: '#93C5FD' },
  playingButtonText: { color: '#1E3A8A' }
});
